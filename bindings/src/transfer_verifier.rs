pub use transfer_verifier::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod transfer_verifier {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("verifyProof"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("verifyProof"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("input"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                        5usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[5]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("p"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                        8usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[8]"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static TRANSFERVERIFIER_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\r\xE1\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80chDM\xC7\x14a\x000W[`\0\x80\xFD[a\0\xB0`\x04\x806\x03a\x01\xA0\x81\x10\x15a\0GW`\0\x80\xFD[\x81\x01\x90\x80\x80`\xA0\x01\x90`\x05\x80` \x02`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x82`\x05` \x02\x80\x82\x847`\0\x92\x01\x91\x90\x91RPP`@\x80Qa\x01\0\x81\x81\x01\x90\x92R\x92\x95\x94\x93\x81\x81\x01\x93\x92P\x90`\x08\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RP\x91\x94Pa\0\xC4\x93PPPPV[`@\x80Q\x91\x15\x15\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[`\0\x80[`\x08\x81`\xFF\x16\x10\x15a\x01MW\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x82`\xFF\x16`\x08\x81\x10a\x01\x04W\xFE[` \x02\x01Q\x10a\x01EW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`\"\x81R` \x01\x80a\r\x8A`\"\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\x01\x01a\0\xC8V[Pa\x01Va\x0B\xD7V[`@\x80Q\x80\x82\x01\x82R\x84Q\x81R` \x80\x86\x01Q\x81\x83\x01R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R``\x80\x88\x01Q\x83\x86\x01\x90\x81R\x88\x86\x01Q\x91\x84\x01\x91\x90\x91R\x82R\x83Q\x80\x85\x01\x85R`\xA0\x88\x01Q\x81R\x90\x87\x01Q\x81\x84\x01R\x81\x83\x01R\x83\x82\x01R\x81Q\x80\x83\x01\x83R`\xC0\x86\x01Q\x81R`\xE0\x86\x01Q\x91\x81\x01\x91\x90\x91R\x90\x82\x01Ra\x01\xD6a\x0C\tV[a\x01\xDEa\x035V[\x90Pa\x01\xE8a\x0CPV[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90Pa\x02 \x81\x83`\x80\x01Q`\0`\x06\x81\x10a\x02\x16W\xFE[` \x02\x01Qa\x07\xACV[\x90P`\0[`\x05\x81\x10\x15a\x02\xF6W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01\x87\x82`\x05\x81\x10a\x02[W\xFE[` \x02\x01Q\x10a\x02\xB2W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7Fverifier-gte-snark-scalar-field\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x02\xEC\x82a\x02\xE7\x85`\x80\x01Q\x84`\x01\x01`\x06\x81\x10a\x02\xCCW\xFE[` \x02\x01Q\x8A\x85`\x05\x81\x10a\x02\xDDW\xFE[` \x02\x01Qa\x08LV[a\x07\xACV[\x91P`\x01\x01a\x02%V[Pa\x03+a\x03\x07\x84`\0\x01Qa\x08\xD2V[\x84` \x01Q\x84`\0\x01Q\x85` \x01Q\x85\x87`@\x01Q\x89`@\x01Q\x89``\x01Qa\tyV[\x96\x95PPPPPPV[a\x03=a\x0C\tV[`@\x80Q\x80\x82\x01\x82R\x7F\x17\x83\xC0\\\xFD'\xB8\xE7\xF4FPp\xD9\xDB<k\xF5t?\xE8\x11\nV\xE7\xF4\xC7\0N\xBA\x9A\0\xFC\x81R\x7F\n\x15\x7FSv\xA6\x02ZA\nb8\xD3\xA4<a\xFCx\xA1\xA8\t\x94\xB6\x7F\xA0\xCA\xEC\xF6\x1C\xB1\xD6\x9E` \x80\x83\x01\x91\x90\x91R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R\x7F\x13\x87\xF8\xD1\xEA\xD5h\x85\x9Cx\xCB\x8D\x93\x81\x84\"\xF3\x9F\x9A\x9C\xD8\xFChd\xC9\xE8\xE9s\x99\xDDsq\x82\x85\x01\x90\x81R\x7F*\x1A\xDD1\xB3\xF5\x16\xC4y\xDE\x85\xFF\xA3$x\t\xF6\x84M\x94J\xFA\x1B \xA3\x9C\x12\x02\xF3\x18\xE4\xAE``\x80\x85\x01\x91\x90\x91R\x90\x83R\x84Q\x80\x86\x01\x86R\x7F\x14\xBDo\x10\xAB\xE8\x0FQ'`\x19\x93\x8Fw*_\x85\xC4\x1B'\x06\x0E\xBF\xEE\xA9\xBE\x17\x96\x80\xE9\xF6W\x81R\x7F\x07d\x99\xD4w\xAAZ~\xD3@\xE7f\x9D\xAC\xD0\xE0]\xCDv!\xA6\xE8\x11\xC7\xADN\xA8\xDB\x0CurD\x81\x86\x01R\x83\x85\x01R\x85\x84\x01\x92\x90\x92R\x83Q\x80\x82\x01\x85R\x7F\x02D\x14\x7F\xB7\x12}\x06Q\xD4A0\x1F!;\x96nMx\x17K{\xE7\xDE\xF2\xC781\xAC\x14\x81\xC8\x81\x86\x01\x90\x81R\x7F'V\xF4\x8Bty\xC7\x83\x8B\xC6x\xA2\x9C\x8D\xC8\xB5\x1A\x88!?\xA4\xC2\xE6g\x93\xD8\xF3f\x91,\x85\xB5\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F\x1A\xB9\x85k\xA2\xE5B\x93(3\xDA\xDAM\xDC$2\x950\xDE\x12.\x08\x1C\xB3\xFF~C\xFA\xF7W\xDA\xB9\x81R\x7F\x08\x8D\xEEu\xCA&\xB3l\x7F\x80S\xDDj\x084\0\xB6\x88]\xDBs\x91XH\xCA\x88\x8F\0N\x1E\xC3\xE8\x81\x86\x01R\x81\x85\x01R\x85\x85\x01R\x83Q\x80\x82\x01\x85R\x7F\x05\xA96\x87\xD4\x16\x92[\xF2\xB4Z%\xC1\x02\xB0\x0B\x8D\x7F+\x98 \xF9\"\xFD\x1CH\xC73\xFAaE\xC0\x81\x86\x01\x90\x81R\x7F\"\x88[\x98\xFA\x8E\x1E\xDA\xD2vf\xB3\xF3\xCA\xDB\xD8\x96\x12\xDF\xBB\xC5!\xC4\xA7w\xFAD~\xD0\xE7\0T\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F*BB\xCA\x19\x1B\xA8\x866\x02]\x06|\xD4\xCC\x05\xF2L\x99\xDB8\x04\xEB\xCAU\x97#]U\x1DKZ\x81R\x7F\x13\xB2D\x1A\x12\xB6A\xD7{\xCF\x05I\xB8>\xB7<\xF8*\xC3\xFE\x1B\xE6*[p\x8A\xF3\xA3\xA9\xD1>\xCB\x81\x86\x01R\x81\x85\x01R\x82\x86\x01R\x83Q\x80\x85\x01\x85R\x7F\x1D\x9D.\x03\xF3\xE4\xBE\xB0\t\xC9\xA1\xF1\xD0\xC3\xDC\xAF\xCF\xB2\xF1\th\xBB\x02\xD3i\xABdH/\x85\xEEY\x81R\x7F\x19\x0C\x9E\xA0\xE9<\xCE\"<\xE8M\0\xDE\xFE\x06\xB7i\xD3_.W^\x94\xB5\xAE\x8A\xE55\xDD\xAA\xF1/\x81\x85\x01R\x81\x86\x01\x80Q\x91\x90\x91R\x84Q\x80\x86\x01\x86R\x7F%P\x93\x89\x01\xCB\xA1\xBA\x1DQM(\xB2\r9;\x84l\xC4\x9FX\x95/p\xA7\xCF:N\x0B\xF5\xFB\xDC\x81R\x7F\x13n\xC7\xCA\xA3\xCB\x18%b\xBF:\x8F\xAE\xB0\x8D\xD5\xBD\xCAH\x85cuu\xA3\xD2\x0E\x84\t\xAA\x94\xF1:\x81\x86\x01R\x81Q\x85\x01R\x84Q\x80\x86\x01\x86R\x7F\x1A\xC7\x96L\x82\xC8\x03\x19\xD6G\xFE\x9A\x94\x8A\x8E\xFD\x0F0T\xB0{\x9C\x85\xC4\x11>UC\x0F\xC8\x0E\x92\x81R~\xE23\x8B\xE3?|o\xE5 4\xF6b\xE1Gx'5Z\x8D\x1AR\x16Ul<x\x18\xBE\x9F\xA6\xF5\x81\x86\x01R\x81Q\x86\x01R\x84Q\x80\x86\x01\x86R\x7F\x171\x9E\x99\x83\x03C\x97\x13\xB8\xE0\x89\xB0\xA1bR\x02l0\0\x97\xEC\xAE\x8B\xD6#L\x1B\xE8d\xA1\x0C\x81R\x7F\x1A\xFFc\xEA\xBB\xF0@\xF3\xC3U\x11\xD5\x86\xCB\x86F}\xD2\xFF\xD6N\xA3\xBF\xB2\xF6\x17N\xCD\xBF\x9D\x07>\x81\x86\x01R\x81Q\x90\x93\x01\x92\x90\x92R\x83Q\x80\x85\x01\x85R\x7F\x1F\xF8\xE6.{\x7Fu\x0E\xE8\x19\xA2\x87M\xBA\xD8\x073\xD9\xFFT\xB4!>\xE4q)n\xA0\xDA\x9C\x15\x1E\x81R\x7F\x1B7\xD0\xB5\xAD\x96\x93\x0C\xD3\xF2\xE2rzeC\xA2\x10\x17Ej\x07^\xA6n\xA1t\x18\xD1\xFFi\xFFJ\x81\x85\x01R\x82Q\x90\x91\x01R\x82Q\x80\x84\x01\x90\x93R\x7F,\xE54'q\xE9p\x11\x8A\x8F{*\xB4\xA7\x8F\xA9\xEE0\x16h\x12\xF8d'w\xB7\xA7\xD5)w.o\x83R\x7F\nU\x83\xF7\x17\xF3\x90\x83;u\xB1\xAC\x9Cr4\x8A7\xA5s\xD8CL\x83\nS\xDF2\x91\0\xD9\xDBN\x91\x83\x01\x91\x90\x91RQ`\xA0\x01R\x90V[a\x07\xB4a\x0CPV[a\x07\xBCa\x0CjV[\x83Q\x81R` \x80\x85\x01Q\x81\x83\x01R\x83Q`@\x83\x01R\x83\x01Q``\x80\x83\x01\x91\x90\x91R`\0\x90\x83`\xC0\x84`\x06a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFAWa\x07\xFCV[\xFE[P\x80a\x08DW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCBXY\x19\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PP\x92\x91PPV[a\x08Ta\x0CPV[a\x08\\a\x0C\x88V[\x83Q\x81R` \x80\x85\x01Q\x90\x82\x01R`@\x81\x01\x83\x90R`\0``\x83`\x80\x84`\x07a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFAWP\x80a\x08DW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCB[][\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x08\xDAa\x0CPV[\x81Q\x15\x80\x15a\x08\xEBWP` \x82\x01Q\x15[\x15a\t\nWP`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01Ra\ttV[`@Q\x80`@\x01`@R\x80\x83`\0\x01Q\x81R` \x01\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x84` \x01Q\x81a\tLW\xFE[\x06\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x03\x90R\x90P[\x91\x90PV[`\0a\t\x83a\x0C\xA6V[`@Q\x80`\x80\x01`@R\x80\x8B\x81R` \x01\x89\x81R` \x01\x87\x81R` \x01\x85\x81RP\x90Pa\t\xAEa\x0C\xD3V[P`@\x80Q`\x80\x81\x01\x82R\x8A\x81R` \x81\x01\x89\x90R\x80\x82\x01\x87\x90R``\x80\x82\x01\x86\x90R\x82Q`\x18\x80\x82Ra\x03 \x82\x01\x90\x94R\x91\x92\x91\x82\x81` \x01` \x82\x02\x806\x837\x01\x90PP\x90P`\0[`\x04\x81\x10\x15a\x0BPW`\x06\x81\x02\x85\x82`\x04\x81\x10a\n\x12W\xFE[` \x02\x01QQ\x83Q\x84\x90\x83\x90\x81\x10a\n&W\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x82`\x04\x81\x10a\n>W\xFE[` \x02\x01Q` \x01Q\x83\x82`\x01\x01\x81Q\x81\x10a\nVW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\nnW\xFE[` \x02\x01QQQ\x83Q\x84\x90`\x02\x84\x01\x90\x81\x10a\n\x86W\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\n\x9EW\xFE[` \x02\x01QQ`\x01` \x02\x01Q\x83\x82`\x03\x01\x81Q\x81\x10a\n\xBAW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\n\xD2W\xFE[` \x02\x01Q` \x01Q`\0`\x02\x81\x10a\n\xE7W\xFE[` \x02\x01Q\x83\x82`\x04\x01\x81Q\x81\x10a\n\xFBW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\x0B\x13W\xFE[` \x02\x01Q` \x01Q`\x01`\x02\x81\x10a\x0B(W\xFE[` \x02\x01Q\x83\x82`\x05\x01\x81Q\x81\x10a\x0B<W\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\t\xF9V[Pa\x0BYa\r\0V[`\0` \x82` \x86\x02` \x86\x01`\x08a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFAWP\x80a\x0B\xC2W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x1C\x18Z\\\x9A[\x99\xCB[\xDC\x18\xDB\xD9\x19KY\x98Z[\x19Y`Z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PQ\x15\x15\x9D\x9CPPPPPPPPPPPPPV[`@Q\x80``\x01`@R\x80a\x0B\xEAa\x0CPV[\x81R` \x01a\x0B\xF7a\r\x1EV[\x81R` \x01a\x0C\x04a\x0CPV[\x90R\x90V[`@Q\x80`\xA0\x01`@R\x80a\x0C\x1Ca\x0CPV[\x81R` \x01a\x0C)a\r\x1EV[\x81R` \x01a\x0C6a\r\x1EV[\x81R` \x01a\x0CCa\r\x1EV[\x81R` \x01a\x0C\x04a\r>V[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80``\x01`@R\x80`\x03\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`\x80\x01`@R\x80`\x04\x90[a\x0C\xBDa\x0CPV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xB5W\x90PP\x90V[`@Q\x80`\x80\x01`@R\x80`\x04\x90[a\x0C\xEAa\r\x1EV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xE2W\x90PP\x90V[`@Q\x80` \x01`@R\x80`\x01\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`@\x01`@R\x80a\r1a\rkV[\x81R` \x01a\x0C\x04a\rkV[`@Q\x80`\xC0\x01`@R\x80`\x06\x90[a\rUa\x0CPV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\rMW\x90PP\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV\xFEverifier-proof-element-gte-prime-q\xA2dipfsX\"\x12 \x12\xDFT4\xE9\xE7$\xE2\xFB\x82\xD4\xC9\x05o\x90,\x02\xDA\xC32\xA7Y\x95\xA2\xD7Rm\x05\xB7\xB2\xBC\xB7dsolcC\0\x06\x0C\x003";
    /// The bytecode of the contract.
    pub static TRANSFERVERIFIER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80chDM\xC7\x14a\x000W[`\0\x80\xFD[a\0\xB0`\x04\x806\x03a\x01\xA0\x81\x10\x15a\0GW`\0\x80\xFD[\x81\x01\x90\x80\x80`\xA0\x01\x90`\x05\x80` \x02`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x82`\x05` \x02\x80\x82\x847`\0\x92\x01\x91\x90\x91RPP`@\x80Qa\x01\0\x81\x81\x01\x90\x92R\x92\x95\x94\x93\x81\x81\x01\x93\x92P\x90`\x08\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RP\x91\x94Pa\0\xC4\x93PPPPV[`@\x80Q\x91\x15\x15\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[`\0\x80[`\x08\x81`\xFF\x16\x10\x15a\x01MW\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x82`\xFF\x16`\x08\x81\x10a\x01\x04W\xFE[` \x02\x01Q\x10a\x01EW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`\"\x81R` \x01\x80a\r\x8A`\"\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\x01\x01a\0\xC8V[Pa\x01Va\x0B\xD7V[`@\x80Q\x80\x82\x01\x82R\x84Q\x81R` \x80\x86\x01Q\x81\x83\x01R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R``\x80\x88\x01Q\x83\x86\x01\x90\x81R\x88\x86\x01Q\x91\x84\x01\x91\x90\x91R\x82R\x83Q\x80\x85\x01\x85R`\xA0\x88\x01Q\x81R\x90\x87\x01Q\x81\x84\x01R\x81\x83\x01R\x83\x82\x01R\x81Q\x80\x83\x01\x83R`\xC0\x86\x01Q\x81R`\xE0\x86\x01Q\x91\x81\x01\x91\x90\x91R\x90\x82\x01Ra\x01\xD6a\x0C\tV[a\x01\xDEa\x035V[\x90Pa\x01\xE8a\x0CPV[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90Pa\x02 \x81\x83`\x80\x01Q`\0`\x06\x81\x10a\x02\x16W\xFE[` \x02\x01Qa\x07\xACV[\x90P`\0[`\x05\x81\x10\x15a\x02\xF6W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01\x87\x82`\x05\x81\x10a\x02[W\xFE[` \x02\x01Q\x10a\x02\xB2W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7Fverifier-gte-snark-scalar-field\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x02\xEC\x82a\x02\xE7\x85`\x80\x01Q\x84`\x01\x01`\x06\x81\x10a\x02\xCCW\xFE[` \x02\x01Q\x8A\x85`\x05\x81\x10a\x02\xDDW\xFE[` \x02\x01Qa\x08LV[a\x07\xACV[\x91P`\x01\x01a\x02%V[Pa\x03+a\x03\x07\x84`\0\x01Qa\x08\xD2V[\x84` \x01Q\x84`\0\x01Q\x85` \x01Q\x85\x87`@\x01Q\x89`@\x01Q\x89``\x01Qa\tyV[\x96\x95PPPPPPV[a\x03=a\x0C\tV[`@\x80Q\x80\x82\x01\x82R\x7F\x17\x83\xC0\\\xFD'\xB8\xE7\xF4FPp\xD9\xDB<k\xF5t?\xE8\x11\nV\xE7\xF4\xC7\0N\xBA\x9A\0\xFC\x81R\x7F\n\x15\x7FSv\xA6\x02ZA\nb8\xD3\xA4<a\xFCx\xA1\xA8\t\x94\xB6\x7F\xA0\xCA\xEC\xF6\x1C\xB1\xD6\x9E` \x80\x83\x01\x91\x90\x91R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R\x7F\x13\x87\xF8\xD1\xEA\xD5h\x85\x9Cx\xCB\x8D\x93\x81\x84\"\xF3\x9F\x9A\x9C\xD8\xFChd\xC9\xE8\xE9s\x99\xDDsq\x82\x85\x01\x90\x81R\x7F*\x1A\xDD1\xB3\xF5\x16\xC4y\xDE\x85\xFF\xA3$x\t\xF6\x84M\x94J\xFA\x1B \xA3\x9C\x12\x02\xF3\x18\xE4\xAE``\x80\x85\x01\x91\x90\x91R\x90\x83R\x84Q\x80\x86\x01\x86R\x7F\x14\xBDo\x10\xAB\xE8\x0FQ'`\x19\x93\x8Fw*_\x85\xC4\x1B'\x06\x0E\xBF\xEE\xA9\xBE\x17\x96\x80\xE9\xF6W\x81R\x7F\x07d\x99\xD4w\xAAZ~\xD3@\xE7f\x9D\xAC\xD0\xE0]\xCDv!\xA6\xE8\x11\xC7\xADN\xA8\xDB\x0CurD\x81\x86\x01R\x83\x85\x01R\x85\x84\x01\x92\x90\x92R\x83Q\x80\x82\x01\x85R\x7F\x02D\x14\x7F\xB7\x12}\x06Q\xD4A0\x1F!;\x96nMx\x17K{\xE7\xDE\xF2\xC781\xAC\x14\x81\xC8\x81\x86\x01\x90\x81R\x7F'V\xF4\x8Bty\xC7\x83\x8B\xC6x\xA2\x9C\x8D\xC8\xB5\x1A\x88!?\xA4\xC2\xE6g\x93\xD8\xF3f\x91,\x85\xB5\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F\x1A\xB9\x85k\xA2\xE5B\x93(3\xDA\xDAM\xDC$2\x950\xDE\x12.\x08\x1C\xB3\xFF~C\xFA\xF7W\xDA\xB9\x81R\x7F\x08\x8D\xEEu\xCA&\xB3l\x7F\x80S\xDDj\x084\0\xB6\x88]\xDBs\x91XH\xCA\x88\x8F\0N\x1E\xC3\xE8\x81\x86\x01R\x81\x85\x01R\x85\x85\x01R\x83Q\x80\x82\x01\x85R\x7F\x05\xA96\x87\xD4\x16\x92[\xF2\xB4Z%\xC1\x02\xB0\x0B\x8D\x7F+\x98 \xF9\"\xFD\x1CH\xC73\xFAaE\xC0\x81\x86\x01\x90\x81R\x7F\"\x88[\x98\xFA\x8E\x1E\xDA\xD2vf\xB3\xF3\xCA\xDB\xD8\x96\x12\xDF\xBB\xC5!\xC4\xA7w\xFAD~\xD0\xE7\0T\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F*BB\xCA\x19\x1B\xA8\x866\x02]\x06|\xD4\xCC\x05\xF2L\x99\xDB8\x04\xEB\xCAU\x97#]U\x1DKZ\x81R\x7F\x13\xB2D\x1A\x12\xB6A\xD7{\xCF\x05I\xB8>\xB7<\xF8*\xC3\xFE\x1B\xE6*[p\x8A\xF3\xA3\xA9\xD1>\xCB\x81\x86\x01R\x81\x85\x01R\x82\x86\x01R\x83Q\x80\x85\x01\x85R\x7F\x1D\x9D.\x03\xF3\xE4\xBE\xB0\t\xC9\xA1\xF1\xD0\xC3\xDC\xAF\xCF\xB2\xF1\th\xBB\x02\xD3i\xABdH/\x85\xEEY\x81R\x7F\x19\x0C\x9E\xA0\xE9<\xCE\"<\xE8M\0\xDE\xFE\x06\xB7i\xD3_.W^\x94\xB5\xAE\x8A\xE55\xDD\xAA\xF1/\x81\x85\x01R\x81\x86\x01\x80Q\x91\x90\x91R\x84Q\x80\x86\x01\x86R\x7F%P\x93\x89\x01\xCB\xA1\xBA\x1DQM(\xB2\r9;\x84l\xC4\x9FX\x95/p\xA7\xCF:N\x0B\xF5\xFB\xDC\x81R\x7F\x13n\xC7\xCA\xA3\xCB\x18%b\xBF:\x8F\xAE\xB0\x8D\xD5\xBD\xCAH\x85cuu\xA3\xD2\x0E\x84\t\xAA\x94\xF1:\x81\x86\x01R\x81Q\x85\x01R\x84Q\x80\x86\x01\x86R\x7F\x1A\xC7\x96L\x82\xC8\x03\x19\xD6G\xFE\x9A\x94\x8A\x8E\xFD\x0F0T\xB0{\x9C\x85\xC4\x11>UC\x0F\xC8\x0E\x92\x81R~\xE23\x8B\xE3?|o\xE5 4\xF6b\xE1Gx'5Z\x8D\x1AR\x16Ul<x\x18\xBE\x9F\xA6\xF5\x81\x86\x01R\x81Q\x86\x01R\x84Q\x80\x86\x01\x86R\x7F\x171\x9E\x99\x83\x03C\x97\x13\xB8\xE0\x89\xB0\xA1bR\x02l0\0\x97\xEC\xAE\x8B\xD6#L\x1B\xE8d\xA1\x0C\x81R\x7F\x1A\xFFc\xEA\xBB\xF0@\xF3\xC3U\x11\xD5\x86\xCB\x86F}\xD2\xFF\xD6N\xA3\xBF\xB2\xF6\x17N\xCD\xBF\x9D\x07>\x81\x86\x01R\x81Q\x90\x93\x01\x92\x90\x92R\x83Q\x80\x85\x01\x85R\x7F\x1F\xF8\xE6.{\x7Fu\x0E\xE8\x19\xA2\x87M\xBA\xD8\x073\xD9\xFFT\xB4!>\xE4q)n\xA0\xDA\x9C\x15\x1E\x81R\x7F\x1B7\xD0\xB5\xAD\x96\x93\x0C\xD3\xF2\xE2rzeC\xA2\x10\x17Ej\x07^\xA6n\xA1t\x18\xD1\xFFi\xFFJ\x81\x85\x01R\x82Q\x90\x91\x01R\x82Q\x80\x84\x01\x90\x93R\x7F,\xE54'q\xE9p\x11\x8A\x8F{*\xB4\xA7\x8F\xA9\xEE0\x16h\x12\xF8d'w\xB7\xA7\xD5)w.o\x83R\x7F\nU\x83\xF7\x17\xF3\x90\x83;u\xB1\xAC\x9Cr4\x8A7\xA5s\xD8CL\x83\nS\xDF2\x91\0\xD9\xDBN\x91\x83\x01\x91\x90\x91RQ`\xA0\x01R\x90V[a\x07\xB4a\x0CPV[a\x07\xBCa\x0CjV[\x83Q\x81R` \x80\x85\x01Q\x81\x83\x01R\x83Q`@\x83\x01R\x83\x01Q``\x80\x83\x01\x91\x90\x91R`\0\x90\x83`\xC0\x84`\x06a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFAWa\x07\xFCV[\xFE[P\x80a\x08DW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCBXY\x19\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PP\x92\x91PPV[a\x08Ta\x0CPV[a\x08\\a\x0C\x88V[\x83Q\x81R` \x80\x85\x01Q\x90\x82\x01R`@\x81\x01\x83\x90R`\0``\x83`\x80\x84`\x07a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFAWP\x80a\x08DW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCB[][\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x08\xDAa\x0CPV[\x81Q\x15\x80\x15a\x08\xEBWP` \x82\x01Q\x15[\x15a\t\nWP`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01Ra\ttV[`@Q\x80`@\x01`@R\x80\x83`\0\x01Q\x81R` \x01\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x84` \x01Q\x81a\tLW\xFE[\x06\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x03\x90R\x90P[\x91\x90PV[`\0a\t\x83a\x0C\xA6V[`@Q\x80`\x80\x01`@R\x80\x8B\x81R` \x01\x89\x81R` \x01\x87\x81R` \x01\x85\x81RP\x90Pa\t\xAEa\x0C\xD3V[P`@\x80Q`\x80\x81\x01\x82R\x8A\x81R` \x81\x01\x89\x90R\x80\x82\x01\x87\x90R``\x80\x82\x01\x86\x90R\x82Q`\x18\x80\x82Ra\x03 \x82\x01\x90\x94R\x91\x92\x91\x82\x81` \x01` \x82\x02\x806\x837\x01\x90PP\x90P`\0[`\x04\x81\x10\x15a\x0BPW`\x06\x81\x02\x85\x82`\x04\x81\x10a\n\x12W\xFE[` \x02\x01QQ\x83Q\x84\x90\x83\x90\x81\x10a\n&W\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x82`\x04\x81\x10a\n>W\xFE[` \x02\x01Q` \x01Q\x83\x82`\x01\x01\x81Q\x81\x10a\nVW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\nnW\xFE[` \x02\x01QQQ\x83Q\x84\x90`\x02\x84\x01\x90\x81\x10a\n\x86W\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\n\x9EW\xFE[` \x02\x01QQ`\x01` \x02\x01Q\x83\x82`\x03\x01\x81Q\x81\x10a\n\xBAW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\n\xD2W\xFE[` \x02\x01Q` \x01Q`\0`\x02\x81\x10a\n\xE7W\xFE[` \x02\x01Q\x83\x82`\x04\x01\x81Q\x81\x10a\n\xFBW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\x0B\x13W\xFE[` \x02\x01Q` \x01Q`\x01`\x02\x81\x10a\x0B(W\xFE[` \x02\x01Q\x83\x82`\x05\x01\x81Q\x81\x10a\x0B<W\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\t\xF9V[Pa\x0BYa\r\0V[`\0` \x82` \x86\x02` \x86\x01`\x08a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFAWP\x80a\x0B\xC2W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x1C\x18Z\\\x9A[\x99\xCB[\xDC\x18\xDB\xD9\x19KY\x98Z[\x19Y`Z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PQ\x15\x15\x9D\x9CPPPPPPPPPPPPPV[`@Q\x80``\x01`@R\x80a\x0B\xEAa\x0CPV[\x81R` \x01a\x0B\xF7a\r\x1EV[\x81R` \x01a\x0C\x04a\x0CPV[\x90R\x90V[`@Q\x80`\xA0\x01`@R\x80a\x0C\x1Ca\x0CPV[\x81R` \x01a\x0C)a\r\x1EV[\x81R` \x01a\x0C6a\r\x1EV[\x81R` \x01a\x0CCa\r\x1EV[\x81R` \x01a\x0C\x04a\r>V[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80``\x01`@R\x80`\x03\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`\x80\x01`@R\x80`\x04\x90[a\x0C\xBDa\x0CPV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xB5W\x90PP\x90V[`@Q\x80`\x80\x01`@R\x80`\x04\x90[a\x0C\xEAa\r\x1EV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xE2W\x90PP\x90V[`@Q\x80` \x01`@R\x80`\x01\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`@\x01`@R\x80a\r1a\rkV[\x81R` \x01a\x0C\x04a\rkV[`@Q\x80`\xC0\x01`@R\x80`\x06\x90[a\rUa\x0CPV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\rMW\x90PP\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV\xFEverifier-proof-element-gte-prime-q\xA2dipfsX\"\x12 \x12\xDFT4\xE9\xE7$\xE2\xFB\x82\xD4\xC9\x05o\x90,\x02\xDA\xC32\xA7Y\x95\xA2\xD7Rm\x05\xB7\xB2\xBC\xB7dsolcC\0\x06\x0C\x003";
    /// The deployed bytecode of the contract.
    pub static TRANSFERVERIFIER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct TransferVerifier<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for TransferVerifier<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for TransferVerifier<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for TransferVerifier<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for TransferVerifier<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(TransferVerifier))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> TransferVerifier<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    TRANSFERVERIFIER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                TRANSFERVERIFIER_ABI.clone(),
                TRANSFERVERIFIER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `verifyProof` (0x68444dc7) function
        pub fn verify_proof(
            &self,
            input: [::ethers::core::types::U256; 5],
            p: [::ethers::core::types::U256; 8],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([104, 68, 77, 199], (input, p))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for TransferVerifier<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `verifyProof` function with signature `verifyProof(uint256[5],uint256[8])` and selector `0x68444dc7`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "verifyProof", abi = "verifyProof(uint256[5],uint256[8])")]
    pub struct VerifyProofCall {
        pub input: [::ethers::core::types::U256; 5],
        pub p: [::ethers::core::types::U256; 8],
    }
    ///Container type for all return fields from the `verifyProof` function with signature `verifyProof(uint256[5],uint256[8])` and selector `0x68444dc7`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct VerifyProofReturn(pub bool);
}
