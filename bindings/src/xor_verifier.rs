pub use xor_verifier::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod xor_verifier {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("verifyProof"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("verifyProof"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("a"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                        2usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[2]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("b"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                                ::std::boxed::Box::new(
                                                    ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                                ),
                                                2usize,
                                            ),
                                        ),
                                        2usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[2][2]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("c"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                        2usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[2]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("input"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                        1usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[1]"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("r"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static XORVERIFIER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\x0E\xA2\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80cCu;M\x14a\x000W[`\0\x80\xFD[a\x01,`\x04\x806\x03a\x01 \x81\x10\x15a\0GW`\0\x80\xFD[`@\x80Q\x80\x82\x01\x82R\x91\x83\x01\x92\x91\x81\x83\x01\x91\x83\x90`\x02\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x82\x90RP`@\x80Q\x80\x82\x01\x90\x91R\x93\x96\x95\x94`\x80\x81\x01\x94\x93P\x91P`\x02\x90\x83[\x82\x82\x10\x15a\0\xC8W`@\x80Q\x80\x82\x01\x82R\x90\x80\x84\x02\x86\x01\x90`\x02\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RPPP\x81R`\x01\x90\x91\x01\x90` \x01a\0\x8AV[PP`@\x80Q\x80\x82\x01\x82R\x93\x96\x95\x94\x81\x81\x01\x94\x93P\x91P`\x02\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RPP`@\x80Q` \x81\x81\x01\x90\x92R\x92\x95\x94\x93\x81\x81\x01\x93\x92P\x90`\x01\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RP\x91\x94Pa\x01@\x93PPPPV[`@\x80Q\x91\x15\x15\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[`\0a\x01Ja\rAV[`@\x80Q\x80\x82\x01\x82R\x87Q\x81R` \x80\x89\x01Q\x81\x83\x01R\x90\x83R\x81Q`\x80\x81\x01\x83R\x87QQ\x81\x84\x01\x90\x81R\x88Q\x83\x01Q``\x80\x84\x01\x91\x90\x91R\x90\x82R\x83Q\x80\x85\x01\x85R\x89\x84\x01\x80QQ\x82RQ\x84\x01Q\x81\x85\x01R\x82\x84\x01R\x84\x83\x01\x91\x90\x91R\x82Q\x80\x84\x01\x84R\x87Q\x81R\x87\x83\x01Q\x81\x84\x01R\x84\x84\x01R\x82Q`\x01\x80\x82R\x81\x85\x01\x90\x94R\x90\x92\x90\x91\x82\x81\x01\x90\x806\x837\x01\x90PP\x90P`\0[`\x01\x81\x10\x15a\x02\x1AW\x84\x81`\x01\x81\x10a\x01\xF6W\xFE[` \x02\x01Q\x82\x82\x81Q\x81\x10a\x02\x07W\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x01\xE1V[Pa\x02%\x81\x83a\x02CV[a\x024W`\x01\x92PPPa\x02;V[`\0\x92PPP[\x94\x93PPPPV[`\0\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01a\x02na\rsV[a\x02va\x04\x1FV[\x90P\x80`\x80\x01QQ\x85Q`\x01\x01\x14a\x02\xCAW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1D\x99\\\x9AY\x9AY\\\x8BX\x98Y\x0BZ[\x9C\x1D]`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x02\xD2a\r\xBAV[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90P`\0[\x86Q\x81\x10\x15a\x03\xA8W\x83\x87\x82\x81Q\x81\x10a\x03\x04W\xFE[` \x02` \x01\x01Q\x10a\x03^W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7Fverifier-gte-snark-scalar-field\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x03\x9E\x82a\x03\x99\x85`\x80\x01Q\x84`\x01\x01\x81Q\x81\x10a\x03xW\xFE[` \x02` \x01\x01Q\x8A\x85\x81Q\x81\x10a\x03\x8CW\xFE[` \x02` \x01\x01Qa\x07\xA0V[a\x085V[\x91P`\x01\x01a\x02\xEEV[Pa\x03\xCB\x81\x83`\x80\x01Q`\0\x81Q\x81\x10a\x03\xBEW\xFE[` \x02` \x01\x01Qa\x085V[\x90Pa\x04\x01a\x03\xDD\x86`\0\x01Qa\x08\xC6V[\x86` \x01Q\x84`\0\x01Q\x85` \x01Q\x85\x87`@\x01Q\x8B`@\x01Q\x89``\x01Qa\tRV[a\x04\x11W`\x01\x93PPPPa\x04\x19V[`\0\x93PPPP[\x92\x91PPV[a\x04'a\rsV[`@\x80Q\x80\x82\x01\x82R\x7F\x1D\x1FC\x1C\xB7WP\xD3?O\xB9\x97\xE0\x10\x1FW\x0B\xAD\x12\xEB\x8E\x85\xCCfv+k\x08`)\xE7Z\x81R\x7F\x1C\0\r\x12\xC6\xD7\xA9\x81\xD9\xE5,o\xEB\xF5\x85\x1C\xAEjJ\xC5(\x9F\x02\xF0t\xB1F}\x08\x9B\x12v` \x80\x83\x01\x91\x90\x91R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R\x7F+ \x7F\xA4{\xD0\xEB.?n\xB1~-\xBFK\n\xD6v\x06\xDA\xB6\x99\x18\x87\x95\x1D\x0Ej{\xCAd\xA8\x82\x85\x01\x90\x81R\x7F\x1E>\x89wVD\x15\"3B\xD0\xB7\xB0g\xC1\xCD\xE9S9\xDF\xF3\x07\xFB`bFgBx\x14D\xEB``\x80\x85\x01\x91\x90\x91R\x90\x83R\x84Q\x80\x86\x01\x86R\x7F\x16_A\x8F\x08\xE4\xEF5j\xCB\x14!%\xE3#\x1E{H\xE6\xC2!F\xA8\x1C3\xE7\xBC7\x87v\x83\\\x81R\x7F%~\0\x07\xDA|\x8A\xB8\xAE\xB0}\xF4\x02\x04\xD3\xC0\xE4,\xAB\x8C\x802F\xF2UW\xE4\xBC\xD9\x8DV\x96\x81\x86\x01R\x83\x85\x01R\x85\x84\x01\x92\x90\x92R\x83Q\x80\x82\x01\x85R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2\x81\x86\x01\x90\x81R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xED\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F\t\x06\x89\xD0X_\xF0u\xEC\x9E\x99\xADi\x0C3\x95\xBCK13p\xB3\x8E\xF3U\xAC\xDA\xDC\xD1\"\x97[\x81R\x7F\x12\xC8^\xA5\xDB\x8Cm\xEBJ\xABq\x80\x8D\xCB@\x8F\xE3\xD1\xE7i\x0CC\xD3{L\xE6\xCC\x01f\xFA}\xAA\x81\x86\x01R\x81\x85\x01R\x85\x85\x01R\x83Q\x90\x81\x01\x84R\x7F\x1E\x91#\xAF\x85\x93\xCB\xF1\xBB\xFFt\xDBS\xB6f\xDD\xCD\x99Y)\xFA\xBA\xF7>\x0F\xD3\x15\xD3\xF5ZL\x02\x81\x85\x01\x90\x81R\x7F\x03K/\x96g?\x16\xCBlT\xECc\xC4\x89\xCF(F\xE8pw\x96\xC0\x89\x1Eh!\x15\xC80\xC7\x0E\xCB\x82\x84\x01R\x81R\x83Q\x80\x85\x01\x85R\x7F+\x911\x8F\xD4G\xF5Y6\xBA\xF1\x89YT?\xAE\x8E\xB3%4\x81\xC3\x94\xD8V\xC4\x9C\xD2d\xACYX\x81R\x7F'\x15\x99\xA19.|v\x11`\xC7x\x91\x06\xCE\x10h\x05\x15_~\xC9l\x03\x82\x90i\x8F\x1C\xB7\x15\xC4\x81\x85\x01R\x81\x84\x01R\x81\x85\x01R\x82Q`\x02\x80\x82R\x91\x81\x01\x90\x93R\x90\x82\x01[a\x06\xA8a\r\xBAV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x06\xA0WPP`\x80\x82\x01\x90\x81R`@\x80Q\x80\x82\x01\x90\x91R\x7F%y\xC7\xCA\x03\xEF\xA64\x9CC\xAAV\xCA\x18l\xADu4\xA8p]\xB9\xC1\x8E\xC9\"\x02\xD8\x81e\xC0L\x81R\x7F\x04\xE8$\xD0\xF4\x0E\xD2p\xF7\x03\x82\x16}\x94C\xAC-(5%\xB9\x19\t:\xD5)\x8B#[L\x9E\x87` \x82\x01R\x90Q\x80Q`\0\x90a\x07!W\xFE[` \x02` \x01\x01\x81\x90RP`@Q\x80`@\x01`@R\x80\x7F\x12\x1F\xCC:4^\xFE\xE7>\x13\x12\xA9\x9D\xA0wq\xF5\xD8\xF6\xAD\x9AMz\x97}\xFBT\xEF9\xA9\xEAC\x81R` \x01\x7F\x1AW\n\xBDV\xB5r\x1F\x9B\xF9\x04BL\xFC\xD6^M\xC0\x03h\\\xA6\xCBWF\xDC\xC7\xB0\xF6\x87\x93]\x81RP\x81`\x80\x01Q`\x01\x81Q\x81\x10a\x07\x92W\xFE[` \x02` \x01\x01\x81\x90RP\x90V[a\x07\xA8a\r\xBAV[a\x07\xB0a\r\xD4V[\x83Q\x81R` \x80\x85\x01Q\x90\x82\x01R`@\x81\x01\x83\x90R`\0``\x83`\x80\x84`\x07a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xE3Wa\x07\xE5V[\xFE[P\x80a\x08-W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCB[][\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PP\x92\x91PPV[a\x08=a\r\xBAV[a\x08Ea\r\xF2V[\x83Q\x81R` \x80\x85\x01Q\x81\x83\x01R\x83Q`@\x83\x01R\x83\x01Q``\x80\x83\x01\x91\x90\x91R`\0\x90\x83`\xC0\x84`\x06a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xE3WP\x80a\x08-W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCBXY\x19\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x08\xCEa\r\xBAV[\x81Q\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x90\x15\x80\x15a\t\x01WP` \x83\x01Q\x15[\x15a\t!WPP`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01Ra\tMV[`@Q\x80`@\x01`@R\x80\x84`\0\x01Q\x81R` \x01\x82\x85` \x01Q\x81a\tCW\xFE[\x06\x83\x03\x81RP\x91PP[\x91\x90PV[`@\x80Q`\x04\x80\x82R`\xA0\x82\x01\x90\x92R`\0\x91``\x91\x90\x81` \x01[a\tva\r\xBAV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\tnWPP`@\x80Q`\x04\x80\x82R`\xA0\x82\x01\x90\x92R\x91\x92P``\x91\x90` \x82\x01[a\t\xACa\x0E\x10V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\t\xA4W\x90PP\x90P\x8A\x82`\0\x81Q\x81\x10a\t\xCFW\xFE[` \x02` \x01\x01\x81\x90RP\x88\x82`\x01\x81Q\x81\x10a\t\xE8W\xFE[` \x02` \x01\x01\x81\x90RP\x86\x82`\x02\x81Q\x81\x10a\n\x01W\xFE[` \x02` \x01\x01\x81\x90RP\x84\x82`\x03\x81Q\x81\x10a\n\x1AW\xFE[` \x02` \x01\x01\x81\x90RP\x89\x81`\0\x81Q\x81\x10a\n3W\xFE[` \x02` \x01\x01\x81\x90RP\x87\x81`\x01\x81Q\x81\x10a\nLW\xFE[` \x02` \x01\x01\x81\x90RP\x85\x81`\x02\x81Q\x81\x10a\neW\xFE[` \x02` \x01\x01\x81\x90RP\x83\x81`\x03\x81Q\x81\x10a\n~W\xFE[` \x02` \x01\x01\x81\x90RPa\n\x93\x82\x82a\n\xA2V[\x9B\x9APPPPPPPPPPPV[`\0\x81Q\x83Q\x14a\n\xF3W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01Ru\x1C\x18Z\\\x9A[\x99\xCB[\x19[\x99\xDD\x1A\x1C\xCBY\x98Z[\x19Y`R\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[\x82Q`\x06\x81\x02``\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x80\x15a\x0B\x12W`\0\x80\xFD[P`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0B<W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0[\x83\x81\x10\x15a\x0C\xC1W\x86\x81\x81Q\x81\x10a\x0BVW\xFE[` \x02` \x01\x01Q`\0\x01Q\x82\x82`\x06\x02`\0\x01\x81Q\x81\x10a\x0BtW\xFE[` \x02` \x01\x01\x81\x81RPP\x86\x81\x81Q\x81\x10a\x0B\x8CW\xFE[` \x02` \x01\x01Q` \x01Q\x82\x82`\x06\x02`\x01\x01\x81Q\x81\x10a\x0B\xAAW\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x81\x81Q\x81\x10a\x0B\xC2W\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01QQQ\x82Q\x83\x90`\x02`\x06\x85\x02\x01\x90\x81\x10a\x0B\xE3W\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x81\x81Q\x81\x10a\x0B\xFBW\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01QQ`\x01` \x02\x01Q\x82\x82`\x06\x02`\x03\x01\x81Q\x81\x10a\x0C W\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x81\x81Q\x81\x10a\x0C8W\xFE[` \x02` \x01\x01Q` \x01Q`\0`\x02\x81\x10a\x0CPW\xFE[` \x02\x01Q\x82\x82`\x06\x02`\x04\x01\x81Q\x81\x10a\x0CgW\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x81\x81Q\x81\x10a\x0C\x7FW\xFE[` \x02` \x01\x01Q` \x01Q`\x01`\x02\x81\x10a\x0C\x97W\xFE[` \x02\x01Q\x82\x82`\x06\x02`\x05\x01\x81Q\x81\x10a\x0C\xAEW\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x0BBV[Pa\x0C\xCAa\x0E0V[`\0` \x82` \x86\x02` \x86\x01`\x08a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xE3WP\x80a\r3W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x1C\x18Z\\\x9A[\x99\xCB[\xDC\x18\xDB\xD9\x19KY\x98Z[\x19Y`Z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PQ\x15\x15\x96\x95PPPPPPV[`@Q\x80``\x01`@R\x80a\rTa\r\xBAV[\x81R` \x01a\raa\x0E\x10V[\x81R` \x01a\rna\r\xBAV[\x90R\x90V[`@Q\x80`\xA0\x01`@R\x80a\r\x86a\r\xBAV[\x81R` \x01a\r\x93a\x0E\x10V[\x81R` \x01a\r\xA0a\x0E\x10V[\x81R` \x01a\r\xADa\x0E\x10V[\x81R` \x01``\x81RP\x90V[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90V[`@Q\x80``\x01`@R\x80`\x03\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`@\x01`@R\x80a\x0E#a\x0ENV[\x81R` \x01a\rna\x0ENV[`@Q\x80` \x01`@R\x80`\x01\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV\xFE\xA2dipfsX\"\x12 ?l{\xFA\xAB\xC53\xCF\xFF\r\x92%\x90\x04\xF6E\xD0,Og\x146\x04\xFF\x9C\x80\xDCf\xF5\x19X\xD5dsolcC\0\x06\x0C\x003";
    /// The bytecode of the contract.
    pub static XORVERIFIER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80cCu;M\x14a\x000W[`\0\x80\xFD[a\x01,`\x04\x806\x03a\x01 \x81\x10\x15a\0GW`\0\x80\xFD[`@\x80Q\x80\x82\x01\x82R\x91\x83\x01\x92\x91\x81\x83\x01\x91\x83\x90`\x02\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x82\x90RP`@\x80Q\x80\x82\x01\x90\x91R\x93\x96\x95\x94`\x80\x81\x01\x94\x93P\x91P`\x02\x90\x83[\x82\x82\x10\x15a\0\xC8W`@\x80Q\x80\x82\x01\x82R\x90\x80\x84\x02\x86\x01\x90`\x02\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RPPP\x81R`\x01\x90\x91\x01\x90` \x01a\0\x8AV[PP`@\x80Q\x80\x82\x01\x82R\x93\x96\x95\x94\x81\x81\x01\x94\x93P\x91P`\x02\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RPP`@\x80Q` \x81\x81\x01\x90\x92R\x92\x95\x94\x93\x81\x81\x01\x93\x92P\x90`\x01\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RP\x91\x94Pa\x01@\x93PPPPV[`@\x80Q\x91\x15\x15\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[`\0a\x01Ja\rAV[`@\x80Q\x80\x82\x01\x82R\x87Q\x81R` \x80\x89\x01Q\x81\x83\x01R\x90\x83R\x81Q`\x80\x81\x01\x83R\x87QQ\x81\x84\x01\x90\x81R\x88Q\x83\x01Q``\x80\x84\x01\x91\x90\x91R\x90\x82R\x83Q\x80\x85\x01\x85R\x89\x84\x01\x80QQ\x82RQ\x84\x01Q\x81\x85\x01R\x82\x84\x01R\x84\x83\x01\x91\x90\x91R\x82Q\x80\x84\x01\x84R\x87Q\x81R\x87\x83\x01Q\x81\x84\x01R\x84\x84\x01R\x82Q`\x01\x80\x82R\x81\x85\x01\x90\x94R\x90\x92\x90\x91\x82\x81\x01\x90\x806\x837\x01\x90PP\x90P`\0[`\x01\x81\x10\x15a\x02\x1AW\x84\x81`\x01\x81\x10a\x01\xF6W\xFE[` \x02\x01Q\x82\x82\x81Q\x81\x10a\x02\x07W\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x01\xE1V[Pa\x02%\x81\x83a\x02CV[a\x024W`\x01\x92PPPa\x02;V[`\0\x92PPP[\x94\x93PPPPV[`\0\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01a\x02na\rsV[a\x02va\x04\x1FV[\x90P\x80`\x80\x01QQ\x85Q`\x01\x01\x14a\x02\xCAW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1D\x99\\\x9AY\x9AY\\\x8BX\x98Y\x0BZ[\x9C\x1D]`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x02\xD2a\r\xBAV[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90P`\0[\x86Q\x81\x10\x15a\x03\xA8W\x83\x87\x82\x81Q\x81\x10a\x03\x04W\xFE[` \x02` \x01\x01Q\x10a\x03^W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7Fverifier-gte-snark-scalar-field\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x03\x9E\x82a\x03\x99\x85`\x80\x01Q\x84`\x01\x01\x81Q\x81\x10a\x03xW\xFE[` \x02` \x01\x01Q\x8A\x85\x81Q\x81\x10a\x03\x8CW\xFE[` \x02` \x01\x01Qa\x07\xA0V[a\x085V[\x91P`\x01\x01a\x02\xEEV[Pa\x03\xCB\x81\x83`\x80\x01Q`\0\x81Q\x81\x10a\x03\xBEW\xFE[` \x02` \x01\x01Qa\x085V[\x90Pa\x04\x01a\x03\xDD\x86`\0\x01Qa\x08\xC6V[\x86` \x01Q\x84`\0\x01Q\x85` \x01Q\x85\x87`@\x01Q\x8B`@\x01Q\x89``\x01Qa\tRV[a\x04\x11W`\x01\x93PPPPa\x04\x19V[`\0\x93PPPP[\x92\x91PPV[a\x04'a\rsV[`@\x80Q\x80\x82\x01\x82R\x7F\x1D\x1FC\x1C\xB7WP\xD3?O\xB9\x97\xE0\x10\x1FW\x0B\xAD\x12\xEB\x8E\x85\xCCfv+k\x08`)\xE7Z\x81R\x7F\x1C\0\r\x12\xC6\xD7\xA9\x81\xD9\xE5,o\xEB\xF5\x85\x1C\xAEjJ\xC5(\x9F\x02\xF0t\xB1F}\x08\x9B\x12v` \x80\x83\x01\x91\x90\x91R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R\x7F+ \x7F\xA4{\xD0\xEB.?n\xB1~-\xBFK\n\xD6v\x06\xDA\xB6\x99\x18\x87\x95\x1D\x0Ej{\xCAd\xA8\x82\x85\x01\x90\x81R\x7F\x1E>\x89wVD\x15\"3B\xD0\xB7\xB0g\xC1\xCD\xE9S9\xDF\xF3\x07\xFB`bFgBx\x14D\xEB``\x80\x85\x01\x91\x90\x91R\x90\x83R\x84Q\x80\x86\x01\x86R\x7F\x16_A\x8F\x08\xE4\xEF5j\xCB\x14!%\xE3#\x1E{H\xE6\xC2!F\xA8\x1C3\xE7\xBC7\x87v\x83\\\x81R\x7F%~\0\x07\xDA|\x8A\xB8\xAE\xB0}\xF4\x02\x04\xD3\xC0\xE4,\xAB\x8C\x802F\xF2UW\xE4\xBC\xD9\x8DV\x96\x81\x86\x01R\x83\x85\x01R\x85\x84\x01\x92\x90\x92R\x83Q\x80\x82\x01\x85R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2\x81\x86\x01\x90\x81R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xED\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F\t\x06\x89\xD0X_\xF0u\xEC\x9E\x99\xADi\x0C3\x95\xBCK13p\xB3\x8E\xF3U\xAC\xDA\xDC\xD1\"\x97[\x81R\x7F\x12\xC8^\xA5\xDB\x8Cm\xEBJ\xABq\x80\x8D\xCB@\x8F\xE3\xD1\xE7i\x0CC\xD3{L\xE6\xCC\x01f\xFA}\xAA\x81\x86\x01R\x81\x85\x01R\x85\x85\x01R\x83Q\x90\x81\x01\x84R\x7F\x1E\x91#\xAF\x85\x93\xCB\xF1\xBB\xFFt\xDBS\xB6f\xDD\xCD\x99Y)\xFA\xBA\xF7>\x0F\xD3\x15\xD3\xF5ZL\x02\x81\x85\x01\x90\x81R\x7F\x03K/\x96g?\x16\xCBlT\xECc\xC4\x89\xCF(F\xE8pw\x96\xC0\x89\x1Eh!\x15\xC80\xC7\x0E\xCB\x82\x84\x01R\x81R\x83Q\x80\x85\x01\x85R\x7F+\x911\x8F\xD4G\xF5Y6\xBA\xF1\x89YT?\xAE\x8E\xB3%4\x81\xC3\x94\xD8V\xC4\x9C\xD2d\xACYX\x81R\x7F'\x15\x99\xA19.|v\x11`\xC7x\x91\x06\xCE\x10h\x05\x15_~\xC9l\x03\x82\x90i\x8F\x1C\xB7\x15\xC4\x81\x85\x01R\x81\x84\x01R\x81\x85\x01R\x82Q`\x02\x80\x82R\x91\x81\x01\x90\x93R\x90\x82\x01[a\x06\xA8a\r\xBAV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x06\xA0WPP`\x80\x82\x01\x90\x81R`@\x80Q\x80\x82\x01\x90\x91R\x7F%y\xC7\xCA\x03\xEF\xA64\x9CC\xAAV\xCA\x18l\xADu4\xA8p]\xB9\xC1\x8E\xC9\"\x02\xD8\x81e\xC0L\x81R\x7F\x04\xE8$\xD0\xF4\x0E\xD2p\xF7\x03\x82\x16}\x94C\xAC-(5%\xB9\x19\t:\xD5)\x8B#[L\x9E\x87` \x82\x01R\x90Q\x80Q`\0\x90a\x07!W\xFE[` \x02` \x01\x01\x81\x90RP`@Q\x80`@\x01`@R\x80\x7F\x12\x1F\xCC:4^\xFE\xE7>\x13\x12\xA9\x9D\xA0wq\xF5\xD8\xF6\xAD\x9AMz\x97}\xFBT\xEF9\xA9\xEAC\x81R` \x01\x7F\x1AW\n\xBDV\xB5r\x1F\x9B\xF9\x04BL\xFC\xD6^M\xC0\x03h\\\xA6\xCBWF\xDC\xC7\xB0\xF6\x87\x93]\x81RP\x81`\x80\x01Q`\x01\x81Q\x81\x10a\x07\x92W\xFE[` \x02` \x01\x01\x81\x90RP\x90V[a\x07\xA8a\r\xBAV[a\x07\xB0a\r\xD4V[\x83Q\x81R` \x80\x85\x01Q\x90\x82\x01R`@\x81\x01\x83\x90R`\0``\x83`\x80\x84`\x07a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xE3Wa\x07\xE5V[\xFE[P\x80a\x08-W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCB[][\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PP\x92\x91PPV[a\x08=a\r\xBAV[a\x08Ea\r\xF2V[\x83Q\x81R` \x80\x85\x01Q\x81\x83\x01R\x83Q`@\x83\x01R\x83\x01Q``\x80\x83\x01\x91\x90\x91R`\0\x90\x83`\xC0\x84`\x06a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xE3WP\x80a\x08-W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCBXY\x19\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x08\xCEa\r\xBAV[\x81Q\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x90\x15\x80\x15a\t\x01WP` \x83\x01Q\x15[\x15a\t!WPP`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01Ra\tMV[`@Q\x80`@\x01`@R\x80\x84`\0\x01Q\x81R` \x01\x82\x85` \x01Q\x81a\tCW\xFE[\x06\x83\x03\x81RP\x91PP[\x91\x90PV[`@\x80Q`\x04\x80\x82R`\xA0\x82\x01\x90\x92R`\0\x91``\x91\x90\x81` \x01[a\tva\r\xBAV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\tnWPP`@\x80Q`\x04\x80\x82R`\xA0\x82\x01\x90\x92R\x91\x92P``\x91\x90` \x82\x01[a\t\xACa\x0E\x10V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\t\xA4W\x90PP\x90P\x8A\x82`\0\x81Q\x81\x10a\t\xCFW\xFE[` \x02` \x01\x01\x81\x90RP\x88\x82`\x01\x81Q\x81\x10a\t\xE8W\xFE[` \x02` \x01\x01\x81\x90RP\x86\x82`\x02\x81Q\x81\x10a\n\x01W\xFE[` \x02` \x01\x01\x81\x90RP\x84\x82`\x03\x81Q\x81\x10a\n\x1AW\xFE[` \x02` \x01\x01\x81\x90RP\x89\x81`\0\x81Q\x81\x10a\n3W\xFE[` \x02` \x01\x01\x81\x90RP\x87\x81`\x01\x81Q\x81\x10a\nLW\xFE[` \x02` \x01\x01\x81\x90RP\x85\x81`\x02\x81Q\x81\x10a\neW\xFE[` \x02` \x01\x01\x81\x90RP\x83\x81`\x03\x81Q\x81\x10a\n~W\xFE[` \x02` \x01\x01\x81\x90RPa\n\x93\x82\x82a\n\xA2V[\x9B\x9APPPPPPPPPPPV[`\0\x81Q\x83Q\x14a\n\xF3W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01Ru\x1C\x18Z\\\x9A[\x99\xCB[\x19[\x99\xDD\x1A\x1C\xCBY\x98Z[\x19Y`R\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[\x82Q`\x06\x81\x02``\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x80\x15a\x0B\x12W`\0\x80\xFD[P`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x0B<W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P`\0[\x83\x81\x10\x15a\x0C\xC1W\x86\x81\x81Q\x81\x10a\x0BVW\xFE[` \x02` \x01\x01Q`\0\x01Q\x82\x82`\x06\x02`\0\x01\x81Q\x81\x10a\x0BtW\xFE[` \x02` \x01\x01\x81\x81RPP\x86\x81\x81Q\x81\x10a\x0B\x8CW\xFE[` \x02` \x01\x01Q` \x01Q\x82\x82`\x06\x02`\x01\x01\x81Q\x81\x10a\x0B\xAAW\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x81\x81Q\x81\x10a\x0B\xC2W\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01QQQ\x82Q\x83\x90`\x02`\x06\x85\x02\x01\x90\x81\x10a\x0B\xE3W\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x81\x81Q\x81\x10a\x0B\xFBW\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01QQ`\x01` \x02\x01Q\x82\x82`\x06\x02`\x03\x01\x81Q\x81\x10a\x0C W\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x81\x81Q\x81\x10a\x0C8W\xFE[` \x02` \x01\x01Q` \x01Q`\0`\x02\x81\x10a\x0CPW\xFE[` \x02\x01Q\x82\x82`\x06\x02`\x04\x01\x81Q\x81\x10a\x0CgW\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x81\x81Q\x81\x10a\x0C\x7FW\xFE[` \x02` \x01\x01Q` \x01Q`\x01`\x02\x81\x10a\x0C\x97W\xFE[` \x02\x01Q\x82\x82`\x06\x02`\x05\x01\x81Q\x81\x10a\x0C\xAEW\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x0BBV[Pa\x0C\xCAa\x0E0V[`\0` \x82` \x86\x02` \x86\x01`\x08a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xE3WP\x80a\r3W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x1C\x18Z\\\x9A[\x99\xCB[\xDC\x18\xDB\xD9\x19KY\x98Z[\x19Y`Z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PQ\x15\x15\x96\x95PPPPPPV[`@Q\x80``\x01`@R\x80a\rTa\r\xBAV[\x81R` \x01a\raa\x0E\x10V[\x81R` \x01a\rna\r\xBAV[\x90R\x90V[`@Q\x80`\xA0\x01`@R\x80a\r\x86a\r\xBAV[\x81R` \x01a\r\x93a\x0E\x10V[\x81R` \x01a\r\xA0a\x0E\x10V[\x81R` \x01a\r\xADa\x0E\x10V[\x81R` \x01``\x81RP\x90V[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90V[`@Q\x80``\x01`@R\x80`\x03\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`@\x01`@R\x80a\x0E#a\x0ENV[\x81R` \x01a\rna\x0ENV[`@Q\x80` \x01`@R\x80`\x01\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV\xFE\xA2dipfsX\"\x12 ?l{\xFA\xAB\xC53\xCF\xFF\r\x92%\x90\x04\xF6E\xD0,Og\x146\x04\xFF\x9C\x80\xDCf\xF5\x19X\xD5dsolcC\0\x06\x0C\x003";
    /// The deployed bytecode of the contract.
    pub static XORVERIFIER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct XorVerifier<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for XorVerifier<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for XorVerifier<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for XorVerifier<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for XorVerifier<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(XorVerifier))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> XorVerifier<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    XORVERIFIER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                XORVERIFIER_ABI.clone(),
                XORVERIFIER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `verifyProof` (0x43753b4d) function
        pub fn verify_proof(
            &self,
            a: [::ethers::core::types::U256; 2],
            b: [[::ethers::core::types::U256; 2]; 2],
            c: [::ethers::core::types::U256; 2],
            input: [::ethers::core::types::U256; 1],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([67, 117, 59, 77], (a, b, c, input))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for XorVerifier<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `verifyProof` function with signature `verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])` and selector `0x43753b4d`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(
        name = "verifyProof",
        abi = "verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])"
    )]
    pub struct VerifyProofCall {
        pub a: [::ethers::core::types::U256; 2],
        pub b: [[::ethers::core::types::U256; 2]; 2],
        pub c: [::ethers::core::types::U256; 2],
        pub input: [::ethers::core::types::U256; 1],
    }
    ///Container type for all return fields from the `verifyProof` function with signature `verifyProof(uint256[2],uint256[2][2],uint256[2],uint256[1])` and selector `0x43753b4d`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct VerifyProofReturn {
        pub r: bool,
    }
}
