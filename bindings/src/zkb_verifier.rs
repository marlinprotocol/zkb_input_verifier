pub use zkb_verifier::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod zkb_verifier {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("verifyProof"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("verifyProof"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("input"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                        5usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[5]"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("p"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                        8usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[8]"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static ZKBVERIFIER_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[Pa\r\xE2\x80a\0 `\09`\0\xF3\xFE`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80chDM\xC7\x14a\x000W[`\0\x80\xFD[a\0\xB0`\x04\x806\x03a\x01\xA0\x81\x10\x15a\0GW`\0\x80\xFD[\x81\x01\x90\x80\x80`\xA0\x01\x90`\x05\x80` \x02`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x82`\x05` \x02\x80\x82\x847`\0\x92\x01\x91\x90\x91RPP`@\x80Qa\x01\0\x81\x81\x01\x90\x92R\x92\x95\x94\x93\x81\x81\x01\x93\x92P\x90`\x08\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RP\x91\x94Pa\0\xC4\x93PPPPV[`@\x80Q\x91\x15\x15\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[`\0\x80[`\x08\x81`\xFF\x16\x10\x15a\x01MW\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x82`\xFF\x16`\x08\x81\x10a\x01\x04W\xFE[` \x02\x01Q\x10a\x01EW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`\"\x81R` \x01\x80a\r\x8B`\"\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\x01\x01a\0\xC8V[Pa\x01Va\x0B\xD8V[`@\x80Q\x80\x82\x01\x82R\x84Q\x81R` \x80\x86\x01Q\x81\x83\x01R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R``\x80\x88\x01Q\x83\x86\x01\x90\x81R\x88\x86\x01Q\x91\x84\x01\x91\x90\x91R\x82R\x83Q\x80\x85\x01\x85R`\xA0\x88\x01Q\x81R\x90\x87\x01Q\x81\x84\x01R\x81\x83\x01R\x83\x82\x01R\x81Q\x80\x83\x01\x83R`\xC0\x86\x01Q\x81R`\xE0\x86\x01Q\x91\x81\x01\x91\x90\x91R\x90\x82\x01Ra\x01\xD6a\x0C\nV[a\x01\xDEa\x035V[\x90Pa\x01\xE8a\x0CQV[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90Pa\x02 \x81\x83`\x80\x01Q`\0`\x06\x81\x10a\x02\x16W\xFE[` \x02\x01Qa\x07\xADV[\x90P`\0[`\x05\x81\x10\x15a\x02\xF6W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01\x87\x82`\x05\x81\x10a\x02[W\xFE[` \x02\x01Q\x10a\x02\xB2W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7Fverifier-gte-snark-scalar-field\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x02\xEC\x82a\x02\xE7\x85`\x80\x01Q\x84`\x01\x01`\x06\x81\x10a\x02\xCCW\xFE[` \x02\x01Q\x8A\x85`\x05\x81\x10a\x02\xDDW\xFE[` \x02\x01Qa\x08MV[a\x07\xADV[\x91P`\x01\x01a\x02%V[Pa\x03+a\x03\x07\x84`\0\x01Qa\x08\xD3V[\x84` \x01Q\x84`\0\x01Q\x85` \x01Q\x85\x87`@\x01Q\x89`@\x01Q\x89``\x01Qa\tzV[\x96\x95PPPPPPV[a\x03=a\x0C\nV[`@\x80Q\x80\x82\x01\x82R\x7F&(\x9C\xD8\xAB\xD1\xFA*\x98\xD4c\xC9\x9B,'\xF4\xD9?\xC0\x0E98\r#J\xC12!\xAE\x9B\x04\xA1\x81R\x7F\x0Et\xE5Bm\xB6\xB0{L_\xDE\xB9\xC8E\xCDz\xD2h\xE0\x17\xEC\x85-V\x9C{x\x89\xA1!\xC60` \x80\x83\x01\x91\x90\x91R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R\x7F\x18\x88\xEC\xD7\xB2\xC8\xCF\xEBhz\xD2\xA24\xC8[\x82\x91V\xA80\xE7\xEC\x17\xE8\xF8\xFA6p\x19\x1F\xBB\xD4\x82\x85\x01\x90\x81R\x7F\rJ\x12\xA0\x9A\x90\xD3C\xC5\xBF'\x8D\xACb\xA5\xBB\xDF\xD2>y`\x0F\x91\x99G\x0E\x1D%\xE8q\xD0\xD4``\x80\x85\x01\x91\x90\x91R\x90\x83R\x84Q\x80\x86\x01\x86R\x7F*\t\x1F\xD6\xEB\x11~9OV\xD1r\x80\x02\xCB\xC2\xAC\r\x80\xB1\x81\xA4\xC7e\xDF\x0Em\xF8\xE1\xC8^G\x81R\x7F\x19\x03\xBD:\x84:!\xC3\x0F(\x9C\x0C\x16\x84\x0B\t\xD0Y\xBF|F)\x8CY\xD3\xE3\xF1A\x826~X\x81\x86\x01R\x83\x85\x01R\x85\x84\x01\x92\x90\x92R\x83Q\x80\x82\x01\x85R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2\x81\x86\x01\x90\x81R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xED\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F\t\x06\x89\xD0X_\xF0u\xEC\x9E\x99\xADi\x0C3\x95\xBCK13p\xB3\x8E\xF3U\xAC\xDA\xDC\xD1\"\x97[\x81R\x7F\x12\xC8^\xA5\xDB\x8Cm\xEBJ\xABq\x80\x8D\xCB@\x8F\xE3\xD1\xE7i\x0CC\xD3{L\xE6\xCC\x01f\xFA}\xAA\x81\x86\x01R\x81\x85\x01R\x85\x85\x01R\x83Q\x80\x82\x01\x85R\x7F(\xBB\x9Bu\xD5\xE8\xB3!Z\x84>\xB2>\xC1\xB5<\"d\xB6\xCC\x1B\xBC\xBBG\xA9\xF7\x0F\"\xCDK\xFB\xD6\x81\x86\x01\x90\x81R\x7F\x10x\xC3\x11\xC3\x95?\xAE/\xFFw4\xCB\xFCb\xC9by\xFC_\xFA(/\xEF\x0E\xA7f\xB7d\xA7\xD4\xAC\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F (\xCE\x02k\xC8=?\xE9\xAB^\xD8\xD8\xB0P.\x1B\xD5\x984\xEB\x1D/\x8D\x8E\xDC\xC8\t\xD6\x9F\xB4\xB7\x81R\x7F\x1A\x02Yd:t\xAA[\xB3\x0E\xB2\xD3\xBF\xEED\x17\xEF\xF3\\n\x95\xE9N\x11\xF5\xF8\xE5\x96]\r>d\x81\x86\x01R\x81\x85\x01R\x82\x86\x01R\x83Q\x80\x85\x01\x85R\x7F\rP\xB8\xCEIs\x18\xB9\x04e\xD6V\xDC\x94B\x82>\x02\xC7\xEC\x85\xAC\xD1\xF6\x952\x9E\xE6P\xFA\x17\xB2\x81R\x7F\x1D5\xAE\xE55\xBEy\x85zb\xE5\x9B\xD7G2\xEB\xA4@\xEB\xF2\xB00\xAE\xC5\xE4\xBD\x01gD\xD6\xC2G\x81\x85\x01R\x81\x86\x01\x80Q\x91\x90\x91R\x84Q\x80\x86\x01\x86R\x7F\x1B\xFB\x0C>'z\xD4en\x83\x86\xC2d\xA1\xEAnt\xF4A\t\xC3\xC5'%_I\x02\xB6n\x04rs\x81R\x7F\r{;\xF0\xD9\x84\x8BS[\xF3G-\xCBs\xEDm\xB7\xD5-\xD0\x7F\xCE\xF7\xBE\xEF\xD5\xFE\xC4d\xD2\x92\\\x81\x86\x01R\x81Q\x85\x01R\x84Q\x80\x86\x01\x86R\x7F\x1C\xCCQ\xAD2\xBB5\x96\xA2v\xC5pU\xC2\xB5\xFD(d+\x8D\xF1>\xB1\xD4\xFA\xE8\x18\xBF\xF1\x91\xF5\xA4\x81R\x7F\x0E\x1E\xA7\")\xEE[U\x05\xD6\x8F\xF7E'\xEF\x8D\xAB; Tw\x8A\xDE\xF5z1\x83T\x8C#\xDAp\x81\x86\x01R\x81Q\x86\x01R\x84Q\x80\x86\x01\x86R\x7F\x1FH\xEE\xE9y\x8D\ts\x87\x14\x18B\xCA\xA4\x9B8\xA8v\xA2;5h\xBB\xC2\xBE\xC8\x9E\xF0\x1E\0.\xD7\x81R\x7F(\xE4H\x93d[d\x13\xB1\x02\xD1\x1C\x96R\x17\xEF#\x1E-}\x8Cn\xF2\xD4\xAE.\xD3\x17{\xA1~k\x81\x86\x01R\x81Q\x90\x93\x01\x92\x90\x92R\x83Q\x80\x85\x01\x85R\x7F\x1EY\xE3Lw\xDD\xF0W\xEF\x1C^4\"E\\G\xB7|\xFA\xF7\xC9\tB\xC6%\x0BB\xCFBV\xCA\x89\x81R\x7F'\xAAn\xC4\x9Du7>\xE3jn\xC3\x12\xD7\xF3\xDC\xE5\x9D\xDB\xB0\xB5\x82~f7\xFE\xB1\xCD\xA9\xFFAj\x81\x85\x01R\x82Q\x90\x91\x01R\x82Q\x80\x84\x01\x90\x93R\x7F\x19\xFEA\x86w\xE7CP>\xD2C\xFBN\xF3\x13\x97m\xD3\x10\xE0sfZ\xBE\xC5b\x14n\xBEhUY\x83R\x7F\x0Cd\xF6\xE1\xA0\xFD\x0E\x0F8`=\xF6\n\x84\xDD\xE2\x99\xD7\x0Ft\xAC\x83H\xD45\xE0r\x02\xCCWs\x9B\x91\x83\x01\x91\x90\x91RQ`\xA0\x01R\x90V[a\x07\xB5a\x0CQV[a\x07\xBDa\x0CkV[\x83Q\x81R` \x80\x85\x01Q\x81\x83\x01R\x83Q`@\x83\x01R\x83\x01Q``\x80\x83\x01\x91\x90\x91R`\0\x90\x83`\xC0\x84`\x06a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFBWa\x07\xFDV[\xFE[P\x80a\x08EW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCBXY\x19\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PP\x92\x91PPV[a\x08Ua\x0CQV[a\x08]a\x0C\x89V[\x83Q\x81R` \x80\x85\x01Q\x90\x82\x01R`@\x81\x01\x83\x90R`\0``\x83`\x80\x84`\x07a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFBWP\x80a\x08EW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCB[][\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x08\xDBa\x0CQV[\x81Q\x15\x80\x15a\x08\xECWP` \x82\x01Q\x15[\x15a\t\x0BWP`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01Ra\tuV[`@Q\x80`@\x01`@R\x80\x83`\0\x01Q\x81R` \x01\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x84` \x01Q\x81a\tMW\xFE[\x06\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x03\x90R\x90P[\x91\x90PV[`\0a\t\x84a\x0C\xA7V[`@Q\x80`\x80\x01`@R\x80\x8B\x81R` \x01\x89\x81R` \x01\x87\x81R` \x01\x85\x81RP\x90Pa\t\xAFa\x0C\xD4V[P`@\x80Q`\x80\x81\x01\x82R\x8A\x81R` \x81\x01\x89\x90R\x80\x82\x01\x87\x90R``\x80\x82\x01\x86\x90R\x82Q`\x18\x80\x82Ra\x03 \x82\x01\x90\x94R\x91\x92\x91\x82\x81` \x01` \x82\x02\x806\x837\x01\x90PP\x90P`\0[`\x04\x81\x10\x15a\x0BQW`\x06\x81\x02\x85\x82`\x04\x81\x10a\n\x13W\xFE[` \x02\x01QQ\x83Q\x84\x90\x83\x90\x81\x10a\n'W\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x82`\x04\x81\x10a\n?W\xFE[` \x02\x01Q` \x01Q\x83\x82`\x01\x01\x81Q\x81\x10a\nWW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\noW\xFE[` \x02\x01QQQ\x83Q\x84\x90`\x02\x84\x01\x90\x81\x10a\n\x87W\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\n\x9FW\xFE[` \x02\x01QQ`\x01` \x02\x01Q\x83\x82`\x03\x01\x81Q\x81\x10a\n\xBBW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\n\xD3W\xFE[` \x02\x01Q` \x01Q`\0`\x02\x81\x10a\n\xE8W\xFE[` \x02\x01Q\x83\x82`\x04\x01\x81Q\x81\x10a\n\xFCW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\x0B\x14W\xFE[` \x02\x01Q` \x01Q`\x01`\x02\x81\x10a\x0B)W\xFE[` \x02\x01Q\x83\x82`\x05\x01\x81Q\x81\x10a\x0B=W\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\t\xFAV[Pa\x0BZa\r\x01V[`\0` \x82` \x86\x02` \x86\x01`\x08a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFBWP\x80a\x0B\xC3W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x1C\x18Z\\\x9A[\x99\xCB[\xDC\x18\xDB\xD9\x19KY\x98Z[\x19Y`Z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PQ\x15\x15\x9D\x9CPPPPPPPPPPPPPV[`@Q\x80``\x01`@R\x80a\x0B\xEBa\x0CQV[\x81R` \x01a\x0B\xF8a\r\x1FV[\x81R` \x01a\x0C\x05a\x0CQV[\x90R\x90V[`@Q\x80`\xA0\x01`@R\x80a\x0C\x1Da\x0CQV[\x81R` \x01a\x0C*a\r\x1FV[\x81R` \x01a\x0C7a\r\x1FV[\x81R` \x01a\x0CDa\r\x1FV[\x81R` \x01a\x0C\x05a\r?V[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80``\x01`@R\x80`\x03\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`\x80\x01`@R\x80`\x04\x90[a\x0C\xBEa\x0CQV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xB6W\x90PP\x90V[`@Q\x80`\x80\x01`@R\x80`\x04\x90[a\x0C\xEBa\r\x1FV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xE3W\x90PP\x90V[`@Q\x80` \x01`@R\x80`\x01\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`@\x01`@R\x80a\r2a\rlV[\x81R` \x01a\x0C\x05a\rlV[`@Q\x80`\xC0\x01`@R\x80`\x06\x90[a\rVa\x0CQV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\rNW\x90PP\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV\xFEverifier-proof-element-gte-prime-q\xA2dipfsX\"\x12 \xB4\x86\x8C\xE3[6\xB0\xCD\xBBF\x97\\w\xF3\xBE\x0E\xE2\xD3.\xB3\x9E<\xE9\x18\xFCi\x9E\x9DU\x10\xF7%dsolcC\0\x06\x0C\x003";
    /// The bytecode of the contract.
    pub static ZKBVERIFIER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x10W`\0\x80\xFD[P`\x046\x10a\0+W`\x005`\xE0\x1C\x80chDM\xC7\x14a\x000W[`\0\x80\xFD[a\0\xB0`\x04\x806\x03a\x01\xA0\x81\x10\x15a\0GW`\0\x80\xFD[\x81\x01\x90\x80\x80`\xA0\x01\x90`\x05\x80` \x02`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x82`\x05` \x02\x80\x82\x847`\0\x92\x01\x91\x90\x91RPP`@\x80Qa\x01\0\x81\x81\x01\x90\x92R\x92\x95\x94\x93\x81\x81\x01\x93\x92P\x90`\x08\x90\x83\x90\x83\x90\x80\x82\x847`\0\x92\x01\x91\x90\x91RP\x91\x94Pa\0\xC4\x93PPPPV[`@\x80Q\x91\x15\x15\x82RQ\x90\x81\x90\x03` \x01\x90\xF3[`\0\x80[`\x08\x81`\xFF\x16\x10\x15a\x01MW\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x83\x82`\xFF\x16`\x08\x81\x10a\x01\x04W\xFE[` \x02\x01Q\x10a\x01EW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01\x80\x80` \x01\x82\x81\x03\x82R`\"\x81R` \x01\x80a\r\x8B`\"\x919`@\x01\x91PP`@Q\x80\x91\x03\x90\xFD[`\x01\x01a\0\xC8V[Pa\x01Va\x0B\xD8V[`@\x80Q\x80\x82\x01\x82R\x84Q\x81R` \x80\x86\x01Q\x81\x83\x01R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R``\x80\x88\x01Q\x83\x86\x01\x90\x81R\x88\x86\x01Q\x91\x84\x01\x91\x90\x91R\x82R\x83Q\x80\x85\x01\x85R`\xA0\x88\x01Q\x81R\x90\x87\x01Q\x81\x84\x01R\x81\x83\x01R\x83\x82\x01R\x81Q\x80\x83\x01\x83R`\xC0\x86\x01Q\x81R`\xE0\x86\x01Q\x91\x81\x01\x91\x90\x91R\x90\x82\x01Ra\x01\xD6a\x0C\nV[a\x01\xDEa\x035V[\x90Pa\x01\xE8a\x0CQV[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90Pa\x02 \x81\x83`\x80\x01Q`\0`\x06\x81\x10a\x02\x16W\xFE[` \x02\x01Qa\x07\xADV[\x90P`\0[`\x05\x81\x10\x15a\x02\xF6W\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01\x87\x82`\x05\x81\x10a\x02[W\xFE[` \x02\x01Q\x10a\x02\xB2W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7Fverifier-gte-snark-scalar-field\0`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x02\xEC\x82a\x02\xE7\x85`\x80\x01Q\x84`\x01\x01`\x06\x81\x10a\x02\xCCW\xFE[` \x02\x01Q\x8A\x85`\x05\x81\x10a\x02\xDDW\xFE[` \x02\x01Qa\x08MV[a\x07\xADV[\x91P`\x01\x01a\x02%V[Pa\x03+a\x03\x07\x84`\0\x01Qa\x08\xD3V[\x84` \x01Q\x84`\0\x01Q\x85` \x01Q\x85\x87`@\x01Q\x89`@\x01Q\x89``\x01Qa\tzV[\x96\x95PPPPPPV[a\x03=a\x0C\nV[`@\x80Q\x80\x82\x01\x82R\x7F&(\x9C\xD8\xAB\xD1\xFA*\x98\xD4c\xC9\x9B,'\xF4\xD9?\xC0\x0E98\r#J\xC12!\xAE\x9B\x04\xA1\x81R\x7F\x0Et\xE5Bm\xB6\xB0{L_\xDE\xB9\xC8E\xCDz\xD2h\xE0\x17\xEC\x85-V\x9C{x\x89\xA1!\xC60` \x80\x83\x01\x91\x90\x91R\x90\x83R\x81Q`\x80\x80\x82\x01\x84R\x7F\x18\x88\xEC\xD7\xB2\xC8\xCF\xEBhz\xD2\xA24\xC8[\x82\x91V\xA80\xE7\xEC\x17\xE8\xF8\xFA6p\x19\x1F\xBB\xD4\x82\x85\x01\x90\x81R\x7F\rJ\x12\xA0\x9A\x90\xD3C\xC5\xBF'\x8D\xACb\xA5\xBB\xDF\xD2>y`\x0F\x91\x99G\x0E\x1D%\xE8q\xD0\xD4``\x80\x85\x01\x91\x90\x91R\x90\x83R\x84Q\x80\x86\x01\x86R\x7F*\t\x1F\xD6\xEB\x11~9OV\xD1r\x80\x02\xCB\xC2\xAC\r\x80\xB1\x81\xA4\xC7e\xDF\x0Em\xF8\xE1\xC8^G\x81R\x7F\x19\x03\xBD:\x84:!\xC3\x0F(\x9C\x0C\x16\x84\x0B\t\xD0Y\xBF|F)\x8CY\xD3\xE3\xF1A\x826~X\x81\x86\x01R\x83\x85\x01R\x85\x84\x01\x92\x90\x92R\x83Q\x80\x82\x01\x85R\x7F\x19\x8E\x93\x93\x92\rH:r`\xBF\xB71\xFB]%\xF1\xAAI35\xA9\xE7\x12\x97\xE4\x85\xB7\xAE\xF3\x12\xC2\x81\x86\x01\x90\x81R\x7F\x18\0\xDE\xEF\x12\x1F\x1EvBj\0f^\\DygC\"\xD4\xF7^\xDA\xDDF\xDE\xBD\\\xD9\x92\xF6\xED\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F\t\x06\x89\xD0X_\xF0u\xEC\x9E\x99\xADi\x0C3\x95\xBCK13p\xB3\x8E\xF3U\xAC\xDA\xDC\xD1\"\x97[\x81R\x7F\x12\xC8^\xA5\xDB\x8Cm\xEBJ\xABq\x80\x8D\xCB@\x8F\xE3\xD1\xE7i\x0CC\xD3{L\xE6\xCC\x01f\xFA}\xAA\x81\x86\x01R\x81\x85\x01R\x85\x85\x01R\x83Q\x80\x82\x01\x85R\x7F(\xBB\x9Bu\xD5\xE8\xB3!Z\x84>\xB2>\xC1\xB5<\"d\xB6\xCC\x1B\xBC\xBBG\xA9\xF7\x0F\"\xCDK\xFB\xD6\x81\x86\x01\x90\x81R\x7F\x10x\xC3\x11\xC3\x95?\xAE/\xFFw4\xCB\xFCb\xC9by\xFC_\xFA(/\xEF\x0E\xA7f\xB7d\xA7\xD4\xAC\x82\x85\x01R\x81R\x84Q\x80\x86\x01\x86R\x7F (\xCE\x02k\xC8=?\xE9\xAB^\xD8\xD8\xB0P.\x1B\xD5\x984\xEB\x1D/\x8D\x8E\xDC\xC8\t\xD6\x9F\xB4\xB7\x81R\x7F\x1A\x02Yd:t\xAA[\xB3\x0E\xB2\xD3\xBF\xEED\x17\xEF\xF3\\n\x95\xE9N\x11\xF5\xF8\xE5\x96]\r>d\x81\x86\x01R\x81\x85\x01R\x82\x86\x01R\x83Q\x80\x85\x01\x85R\x7F\rP\xB8\xCEIs\x18\xB9\x04e\xD6V\xDC\x94B\x82>\x02\xC7\xEC\x85\xAC\xD1\xF6\x952\x9E\xE6P\xFA\x17\xB2\x81R\x7F\x1D5\xAE\xE55\xBEy\x85zb\xE5\x9B\xD7G2\xEB\xA4@\xEB\xF2\xB00\xAE\xC5\xE4\xBD\x01gD\xD6\xC2G\x81\x85\x01R\x81\x86\x01\x80Q\x91\x90\x91R\x84Q\x80\x86\x01\x86R\x7F\x1B\xFB\x0C>'z\xD4en\x83\x86\xC2d\xA1\xEAnt\xF4A\t\xC3\xC5'%_I\x02\xB6n\x04rs\x81R\x7F\r{;\xF0\xD9\x84\x8BS[\xF3G-\xCBs\xEDm\xB7\xD5-\xD0\x7F\xCE\xF7\xBE\xEF\xD5\xFE\xC4d\xD2\x92\\\x81\x86\x01R\x81Q\x85\x01R\x84Q\x80\x86\x01\x86R\x7F\x1C\xCCQ\xAD2\xBB5\x96\xA2v\xC5pU\xC2\xB5\xFD(d+\x8D\xF1>\xB1\xD4\xFA\xE8\x18\xBF\xF1\x91\xF5\xA4\x81R\x7F\x0E\x1E\xA7\")\xEE[U\x05\xD6\x8F\xF7E'\xEF\x8D\xAB; Tw\x8A\xDE\xF5z1\x83T\x8C#\xDAp\x81\x86\x01R\x81Q\x86\x01R\x84Q\x80\x86\x01\x86R\x7F\x1FH\xEE\xE9y\x8D\ts\x87\x14\x18B\xCA\xA4\x9B8\xA8v\xA2;5h\xBB\xC2\xBE\xC8\x9E\xF0\x1E\0.\xD7\x81R\x7F(\xE4H\x93d[d\x13\xB1\x02\xD1\x1C\x96R\x17\xEF#\x1E-}\x8Cn\xF2\xD4\xAE.\xD3\x17{\xA1~k\x81\x86\x01R\x81Q\x90\x93\x01\x92\x90\x92R\x83Q\x80\x85\x01\x85R\x7F\x1EY\xE3Lw\xDD\xF0W\xEF\x1C^4\"E\\G\xB7|\xFA\xF7\xC9\tB\xC6%\x0BB\xCFBV\xCA\x89\x81R\x7F'\xAAn\xC4\x9Du7>\xE3jn\xC3\x12\xD7\xF3\xDC\xE5\x9D\xDB\xB0\xB5\x82~f7\xFE\xB1\xCD\xA9\xFFAj\x81\x85\x01R\x82Q\x90\x91\x01R\x82Q\x80\x84\x01\x90\x93R\x7F\x19\xFEA\x86w\xE7CP>\xD2C\xFBN\xF3\x13\x97m\xD3\x10\xE0sfZ\xBE\xC5b\x14n\xBEhUY\x83R\x7F\x0Cd\xF6\xE1\xA0\xFD\x0E\x0F8`=\xF6\n\x84\xDD\xE2\x99\xD7\x0Ft\xAC\x83H\xD45\xE0r\x02\xCCWs\x9B\x91\x83\x01\x91\x90\x91RQ`\xA0\x01R\x90V[a\x07\xB5a\x0CQV[a\x07\xBDa\x0CkV[\x83Q\x81R` \x80\x85\x01Q\x81\x83\x01R\x83Q`@\x83\x01R\x83\x01Q``\x80\x83\x01\x91\x90\x91R`\0\x90\x83`\xC0\x84`\x06a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFBWa\x07\xFDV[\xFE[P\x80a\x08EW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCBXY\x19\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PP\x92\x91PPV[a\x08Ua\x0CQV[a\x08]a\x0C\x89V[\x83Q\x81R` \x80\x85\x01Q\x90\x82\x01R`@\x81\x01\x83\x90R`\0``\x83`\x80\x84`\x07a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFBWP\x80a\x08EW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x12`$\x82\x01Rq\x1C\x18Z\\\x9A[\x99\xCB[][\x0BY\x98Z[\x19Y`r\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[a\x08\xDBa\x0CQV[\x81Q\x15\x80\x15a\x08\xECWP` \x82\x01Q\x15[\x15a\t\x0BWP`@\x80Q\x80\x82\x01\x90\x91R`\0\x80\x82R` \x82\x01Ra\tuV[`@Q\x80`@\x01`@R\x80\x83`\0\x01Q\x81R` \x01\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x84` \x01Q\x81a\tMW\xFE[\x06\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X]\x97\x81j\x91hq\xCA\x8D< \x8C\x16\xD8|\xFDG\x03\x90R\x90P[\x91\x90PV[`\0a\t\x84a\x0C\xA7V[`@Q\x80`\x80\x01`@R\x80\x8B\x81R` \x01\x89\x81R` \x01\x87\x81R` \x01\x85\x81RP\x90Pa\t\xAFa\x0C\xD4V[P`@\x80Q`\x80\x81\x01\x82R\x8A\x81R` \x81\x01\x89\x90R\x80\x82\x01\x87\x90R``\x80\x82\x01\x86\x90R\x82Q`\x18\x80\x82Ra\x03 \x82\x01\x90\x94R\x91\x92\x91\x82\x81` \x01` \x82\x02\x806\x837\x01\x90PP\x90P`\0[`\x04\x81\x10\x15a\x0BQW`\x06\x81\x02\x85\x82`\x04\x81\x10a\n\x13W\xFE[` \x02\x01QQ\x83Q\x84\x90\x83\x90\x81\x10a\n'W\xFE[` \x02` \x01\x01\x81\x81RPP\x85\x82`\x04\x81\x10a\n?W\xFE[` \x02\x01Q` \x01Q\x83\x82`\x01\x01\x81Q\x81\x10a\nWW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\noW\xFE[` \x02\x01QQQ\x83Q\x84\x90`\x02\x84\x01\x90\x81\x10a\n\x87W\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\n\x9FW\xFE[` \x02\x01QQ`\x01` \x02\x01Q\x83\x82`\x03\x01\x81Q\x81\x10a\n\xBBW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\n\xD3W\xFE[` \x02\x01Q` \x01Q`\0`\x02\x81\x10a\n\xE8W\xFE[` \x02\x01Q\x83\x82`\x04\x01\x81Q\x81\x10a\n\xFCW\xFE[` \x02` \x01\x01\x81\x81RPP\x84\x82`\x04\x81\x10a\x0B\x14W\xFE[` \x02\x01Q` \x01Q`\x01`\x02\x81\x10a\x0B)W\xFE[` \x02\x01Q\x83\x82`\x05\x01\x81Q\x81\x10a\x0B=W\xFE[` \x90\x81\x02\x91\x90\x91\x01\x01RP`\x01\x01a\t\xFAV[Pa\x0BZa\r\x01V[`\0` \x82` \x86\x02` \x86\x01`\x08a\x07\xD0Z\x03\xFA\x90P\x80\x80\x15a\x07\xFBWP\x80a\x0B\xC3W`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x1C\x18Z\\\x9A[\x99\xCB[\xDC\x18\xDB\xD9\x19KY\x98Z[\x19Y`Z\x1B`D\x82\x01R\x90Q\x90\x81\x90\x03`d\x01\x90\xFD[PQ\x15\x15\x9D\x9CPPPPPPPPPPPPPV[`@Q\x80``\x01`@R\x80a\x0B\xEBa\x0CQV[\x81R` \x01a\x0B\xF8a\r\x1FV[\x81R` \x01a\x0C\x05a\x0CQV[\x90R\x90V[`@Q\x80`\xA0\x01`@R\x80a\x0C\x1Da\x0CQV[\x81R` \x01a\x0C*a\r\x1FV[\x81R` \x01a\x0C7a\r\x1FV[\x81R` \x01a\x0CDa\r\x1FV[\x81R` \x01a\x0C\x05a\r?V[`@Q\x80`@\x01`@R\x80`\0\x81R` \x01`\0\x81RP\x90V[`@Q\x80`\x80\x01`@R\x80`\x04\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80``\x01`@R\x80`\x03\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`\x80\x01`@R\x80`\x04\x90[a\x0C\xBEa\x0CQV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xB6W\x90PP\x90V[`@Q\x80`\x80\x01`@R\x80`\x04\x90[a\x0C\xEBa\r\x1FV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x0C\xE3W\x90PP\x90V[`@Q\x80` \x01`@R\x80`\x01\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80`@\x01`@R\x80a\r2a\rlV[\x81R` \x01a\x0C\x05a\rlV[`@Q\x80`\xC0\x01`@R\x80`\x06\x90[a\rVa\x0CQV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\rNW\x90PP\x90V[`@Q\x80`@\x01`@R\x80`\x02\x90` \x82\x02\x806\x837P\x91\x92\x91PPV\xFEverifier-proof-element-gte-prime-q\xA2dipfsX\"\x12 \xB4\x86\x8C\xE3[6\xB0\xCD\xBBF\x97\\w\xF3\xBE\x0E\xE2\xD3.\xB3\x9E<\xE9\x18\xFCi\x9E\x9DU\x10\xF7%dsolcC\0\x06\x0C\x003";
    /// The deployed bytecode of the contract.
    pub static ZKBVERIFIER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct ZkbVerifier<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for ZkbVerifier<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for ZkbVerifier<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for ZkbVerifier<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for ZkbVerifier<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(ZkbVerifier))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> ZkbVerifier<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    ZKBVERIFIER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                ZKBVERIFIER_ABI.clone(),
                ZKBVERIFIER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `verifyProof` (0x68444dc7) function
        pub fn verify_proof(
            &self,
            input: [::ethers::core::types::U256; 5],
            p: [::ethers::core::types::U256; 8],
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([104, 68, 77, 199], (input, p))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for ZkbVerifier<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `verifyProof` function with signature `verifyProof(uint256[5],uint256[8])` and selector `0x68444dc7`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "verifyProof", abi = "verifyProof(uint256[5],uint256[8])")]
    pub struct VerifyProofCall {
        pub input: [::ethers::core::types::U256; 5],
        pub p: [::ethers::core::types::U256; 8],
    }
    ///Container type for all return fields from the `verifyProof` function with signature `verifyProof(uint256[5],uint256[8])` and selector `0x68444dc7`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct VerifyProofReturn(pub bool);
}
